using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using Model;

public partial class RentAdvertisments : System.Web.UI.Page
{
    #region section variables
    public enum RentAdvertismentsSubSection
    {
        Snimu,
        Sdam
    }

    protected RentAdvertismentsSubSection Subsection { get; set; }
    protected string SubsectionName { get; set; }

    protected const int RentSectionId = 1;

    protected AdvertismentsState AdvertismentsMode { get; set; }
    #endregion section variables

    protected void Page_Load(object sender, EventArgs e)
    {
        CapturePageRequestParameters();
    }
    private void CapturePageRequestParameters()
    {
        string sectionName = null;
        if (Page.RouteData.Values["sectionName"] != null)
            sectionName = Page.RouteData.Values["sectionName"].ToString();

        switch (sectionName)
        {
            case "Snimu-kvartiru":
                Subsection = RentAdvertismentsSubSection.Snimu;
                SubsectionName = "Сниму квартиру";
                break;
            case "Sdam-kvartiru":
            default:
                Subsection = RentAdvertismentsSubSection.Sdam;
                SubsectionName = "Сдам квартиру";
                break;
        }

        string advertismentsMode = null;
        if (Page.RouteData.Values["SubpurchaseMode"] != null)
            advertismentsMode = Page.RouteData.Values["SubpurchaseMode"].ToString();
        switch (advertismentsMode)
        {
            case "Vkluchaya-posrednikov":
                AdvertismentsMode = AdvertismentsState.SubpurchaseWithNotSubpurchase;
                lnkWithSubpurchases.InnerText = Resources.Resource.WithSubpurchasesLinkText;
                lnkWithSubpurchases.HRef = Page.GetRouteUrl("Route_RentSection", new System.Web.Routing.RouteValueDictionary()
                {
                    {"sectionName", sectionName},
                    {"SubpurchaseMode", "Bez-posrednikov"}
                });
                //AdvertismentsView.NotShowSubpurchaseCheckbox = true;
                break;
            case "Bez-posrednikov":
            default:
                AdvertismentsMode = AdvertismentsState.NotSubpurchase;
                lnkWithSubpurchases.InnerText = Resources.Resource.WithoutSubpurchasesLinkText;
                lnkWithSubpurchases.HRef = Page.GetRouteUrl("Route_RentSection", new System.Web.Routing.RouteValueDictionary()
                {
                    {"sectionName", sectionName},
                    {"SubpurchaseMode", "Vkluchaya-posrednikov"}
                });
                //AdvertismentsView.NotShowSubpurchaseCheckbox = false;
                break;
        }
    }

    [System.Web.Services.WebMethod]
    [System.Web.Script.Services.ScriptMethod(ResponseFormat = System.Web.Script.Services.ResponseFormat.Json)]
    public static AdvertismentsView GetAdvertisments(int sectionId, AdvertismentsState filter, RentAdvertismentsSubSection subSection, int offset, int limit)
    {
        var context = new NedvijimostDBEntities();

        //--- load advertisments
        var advertismentsWorkflow = new AdvertismentsWorkflow(context);
        var view = advertismentsWorkflow.LoadAdvertisments(sectionId, filter, offset, limit);
        view.Advertisments = SeparateAdvertisments(subSection, view.Advertisments);
        
        return view;
    }
    private static List<Advertisment> SeparateAdvertisments(RentAdvertismentsSubSection Subsection, List<Advertisment> advertisments)
    {
        var rentWorkflow = new RentAdvertismentsWorkflow();
        var separateResult = rentWorkflow.SeparateTakeOffAndRentAdvertisments(advertisments);
        if (separateResult != null && separateResult.RentAdvertisments != null && separateResult.TakeOffAdvertisments != null)
        {
            switch (Subsection)
            {
                case RentAdvertismentsSubSection.Snimu:
                    return separateResult.TakeOffAdvertisments;
                case RentAdvertismentsSubSection.Sdam:
                default:
                    return separateResult.RentAdvertisments;
            }
        }
        else
            return null;
    }
}