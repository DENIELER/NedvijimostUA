using System;
using System.Collections.Generic;
using System.Data.Objects.DataClasses;
using System.IO;
using System.Linq;
using System.Runtime.Remoting.Messaging;
using System.Runtime.Serialization.Formatters.Binary;
using System.Threading;
using System.Xml.Serialization;
using Model;

public partial class Processor_RentHousesProcessor : System.Web.UI.Page
{
    private const string AdvertismentSectionCode = "rent";

    private Log _log;
    private string _logFileName = @"~/Logs/renthouseparse_1.log";

    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack
            && !ProcessorController.IsRentHousesProcessorExecuted1
            && !string.IsNullOrWhiteSpace(Request["password"])
            && Request["password"] == "gtycbz")
        {
            try
            {
                ProcessorController.IsRentHousesProcessorExecuted1 = true;

                _log = new Log(_logFileName);

                _log.WriteLog("---------------------------------------------------------------------------" +
                             Environment.NewLine +
                             "Start Rent Houses parse processing.");
                var Long = new LongRun(ParseAllSitesAndFilter);
                var thread = new Thread(new ThreadStart(Long));
                thread.IsBackground = true;

                var jobHost = new JobHost();
                jobHost.DoWork(thread.Start);

                //var jobHost = new JobHost(_log);
                //jobHost.DoWork(ParseAllSitesAndFilter);
                //IAsyncResult result = Long.BeginInvoke(Callback, null);
            }
            catch (Exception exc)
            {
                _log.WriteLog("Error! " + exc.Message);
            }
        }
    }

    //private void Callback(IAsyncResult ar)
    //{
    //    var Result = (AsyncResult)ar;
    //    var Long = (LongRun)Result.AsyncDelegate;
    //    Long.EndInvoke(Result);  
    //}

    public delegate void LongRun();

    void ThreadProc(Object stateInfo)
    {
        ParseAllSitesAndFilter();
    }

    private void ParseAllSitesAndFilter()
    {
        try
        {
            //-- get sites settings
            var siteSettingsWorkflow = new RentSiteSettingsWorkflow(Resources.Constants.SiteSettingsFile, 1);
            IList<SiteSetting> siteSettings = siteSettingsWorkflow.getSiteSettings();

            var advertsProcessing = new AdvertsProcessing(AdvertismentSectionCode);
            advertsProcessing.Log = _log;
            // capture advertismens from web sites
            advertsProcessing.CaptureAdvertisments(siteSettings);

            //-- moved to the another separate task
            //// filter advertisments from subPurchases
            //var adversitmentsWithoutSubpurchasers = advertsProcessing.FilterSubpurchasers(adversitments);
        }
        catch (Exception e)
        {
            _log.WriteLog("Error! Common error. " + e.Message + ". Trace:" + e.StackTrace);
        }
        finally
        {
            ProcessorController.IsRentHousesProcessorExecuted1 = false;
        }
    }

    #region old save into xml
    
    //private string GenerateFilenameAndSave(int parsedAdvertCount)
    //{
    //    var ukraineTimeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById("FLE Standard Time");
    //    string filename = @"/xmlRentHouseResults/result_" 
    //        + TimeZoneInfo.ConvertTime(DateTime.Now, ukraineTimeZoneInfo).ToString("dd_MM_yyyy") 
    //        + ".xml";

    //    var rentSearchResultsDataContext = new RentSearchResultsDataContext();

    //    var result = (from file in rentSearchResultsDataContext.RentSearchResults
    //                 where file.filename == filename
    //                 select file).SingleOrDefault();
    //    if (result != null)
    //    {
    //        result.createDate = TimeZoneInfo.ConvertTime(DateTime.Now, ukraineTimeZoneInfo);
    //        rentSearchResultsDataContext.SubmitChanges();

    //        return filename;
    //    }
    //    else
    //    {
    //        RentSearchResults rentSearchResults = new RentSearchResults();
    //        rentSearchResults.filename = filename;
    //        rentSearchResults.createDate = TimeZoneInfo.ConvertTime(DateTime.Now, ukraineTimeZoneInfo);
    //        rentSearchResults.parsedAdvertCount = parsedAdvertCount;

    //        rentSearchResultsDataContext.RentSearchResults.InsertOnSubmit(rentSearchResults);
    //        rentSearchResultsDataContext.SubmitChanges();

    //        return filename;
    //    }
    //}
    
    //private void SaveResultListToXml(IEnumerable<AdversitmentsWithPhones> resultList, string filename)
    //{
    //    List<AdversitmentsWithPhones> existsAdvertisments = null;

    //    string serverFileName = Server.MapPath(filename);
    //    if(File.Exists(serverFileName))
    //    {
    //        var advertismentsLoading = new AdvertismentsLoading();
    //        existsAdvertisments = advertismentsLoading.LoadAdversitments(filename);

    //        if(existsAdvertisments != null)
    //        {
    //            foreach (var adversitmentsWithPhonese in resultList)
    //            {
    //                if(existsAdvertisments.IndexOf(adversitmentsWithPhonese) < 0) existsAdvertisments.Add(adversitmentsWithPhonese);
    //            }
    //        }
    //    }

    //    var SerializerObj = new XmlSerializer(typeof(List<AdversitmentsWithPhones>));
    //    using (var fileStream = new FileStream(serverFileName, FileMode.Create))
    //    {
    //        if (existsAdvertisments != null)
    //            SerializerObj.Serialize(fileStream, existsAdvertisments);
    //        else
    //            SerializerObj.Serialize(fileStream, resultList);
    //    }

    //    //var SerializerObj = new XmlSerializer(typeof(List<AdversitmentsWithPhones>));
    //    //var WriteFileStream = new StreamWriter(filename);
    //    //SerializerObj.Serialize(WriteFileStream, resultList);
    //    //WriteFileStream.Close();
    //}

    #endregion

}